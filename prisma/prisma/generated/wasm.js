
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.1
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.1",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  image: 'image',
  price: 'price',
  rating: 'rating'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};


exports.Prisma.ModelName = {
  Product: 'Product'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/Users/volodymyrtretyakov/projects/ecommerce-backend-nestjs-11/prisma/prisma/generated",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "darwin-arm64",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/Users/volodymyrtretyakov/projects/ecommerce-backend-nestjs-11/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": "../../../.env",
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../..",
  "clientVersion": "6.16.1",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "datasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n  // relationMode = \"prisma\"\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"./prisma/generated\"\n  // output   = \"./generated/\"\n  // previewFeatures = [\"fullTextSearch\", \"fullTextIndex\"]\n}\n\nmodel Product {\n  id     String  @id @default(cuid())\n  name   String  @db.Text\n  image  String\n  price  Decimal @db.Decimal(10, 2)\n  rating Int     @default(0)\n  /**\n   * brand         Brand           @relation(fields: [brandId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n   * brandId       Int @map(\"brand_id\")\n   * type          Type            @relation(fields: [typeId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n   * typeId        Int @map(\"type_id\")\n   * product_info  Product_info[]\n   * order_product Order_product[]\n   * wishlist      Wishlist[]\n   * cart          Cart[]\n   * @@index([typeId])\n   * @@index([brandId])\n   */\n\n  @@map(\"products\")\n}\n\n/**\n * model User {\n * id            Int        @id @default(autoincrement())\n * name          String?\n * email         String?    @unique\n * password      String\n * img           String     @default(\"/avatars/default-user-avatar.png\")\n * wishlist      Wishlist[]\n * role          Role       @default(USER_ROLE)\n * orders        Order[]\n * cart          Cart[]\n * }\n * model Wishlist {\n * id        Int     @id @default(autoincrement())\n * productId Int\n * product   Product? @relation(fields: [productId], references: [id], onDelete: Restrict)\n * userId    Int\n * user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)\n * @@index([userId])\n * @@index([productId])\n * }\n * model Cart {\n * id        Int      @id @default(autoincrement())\n * productId Int\n * product   Product? @relation(fields: [productId], references: [id], onDelete: Restrict)\n * userId    Int\n * user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n * count     Int      @default(1)\n * @@index([userId])\n * @@index([productId])\n * }\n * model Order {\n * id             Int             @id @default(autoincrement())\n * userId         Int\n * user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)\n * status         String\n * transactionId  String          @unique\n * paymentAmount  Int\n * createdAt      DateTime\n * updatedAt      DateTime\n * order_products Order_product[]\n * @@index([userId])\n * }\n * model Order_product {\n * id            Int     @id @default(autoincrement())\n * orderId       Int\n * order_product Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)\n * productId     Int\n * product       Product @relation(fields: [productId], references: [id])\n * count         Int\n * @@index([orderId])\n * @@index([productId])\n * }\n * model Product {\n * id            Int             @id @default(autoincrement())\n * name          String          @db.Text\n * price         Int\n * img           String\n * rating        Int             @default(0)\n * brandId       Int\n * brand         Brand           @relation(fields: [brandId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n * typeId        Int\n * type          Type            @relation(fields: [typeId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n * product_info  Product_info[]\n * order_product Order_product[]\n * wishlist      Wishlist[]\n * cart          Cart[]\n * @@index([typeId])\n * @@index([brandId])\n * }\n * model Product_info {\n * id          Int      @id @default(autoincrement())\n * productId   Int\n * product   Product? @relation(fields: [productId], references: [id], onDelete: Restrict)\n * title       String\n * description String\n * @@index([productId])\n * }\n * model Brand {\n * id       Int       @id @default(autoincrement())\n * name     String    @unique\n * products Product[]\n * }\n * model Type {\n * id       Int       @id @default(autoincrement())\n * name     String    @unique\n * products Product[]\n * }\n * enum Role {\n * ADMIN_ROLE\n * }\n */\n",
  "inlineSchemaHash": "a5640bc4b5749164d93f51dc3a87dd8d25e0d6be72afd6f3e1ea8967cdc2e29d",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Product\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"image\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"price\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"rating\",\"kind\":\"scalar\",\"type\":\"Int\"}],\"dbName\":\"products\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

